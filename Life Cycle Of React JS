<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Life Cycle of ReactJs</title>
  </head>  
  <body>
    <div id="root" style="margin:45px; padding:15px; background: grey;"></div>    
    <script type="text/babel">
      var RandomMessageComponent = React.createClass({
			
			//assigning default props to component
			getDefaultProps : function() {
				console.log('getInitialProps() called only once');
				return {
					name: 'This is the initial property called'
				};
			},

			//assigning initial state to the component
			getInitialState : function() {
				console.log('getInitialState() called only once');
				return {
					message: 'This is the initial state Called'
				};
			},

			//component will be mounted as soon as `getDefaultProps` & `getInitialState` executed
			//Initialization of state or third party API initializaion should be happen in his function
			componentWillMount : function() {
				console.log('componentWillMount() called');
				this.state = {
					stateVarible: [{
						title: 'title'
					}],
					message: 'first messssage'
				}
			},
			
			//componentDidMount() will be called after `render()`, in this stage the DOM is created and all DOM Manipulations and interactions will be happened in this phase not in the render phase.
			componentDidMount : function() {
				console.log('componentDidMount() called');
			},

			//changing the state will call `shouldComponentUpdate()` function and `shouldComponentUpdate` will always return a boolean
			shouldComponentUpdate : function(nextprops, nextState) {
				console.log('shouldComponentUpdate() called');
				if (this.state.message !== nextState.message) {
					return true;
				} else {
					return false;
				}
			},

			// if the boolean returned from `shouldComponentUpdate()` is true, `componentWillUpdate` will be called.
			componentWillUpdate : function(nextprops, nextState) {
				console.log('componentWillUpdate() called');
			},

			//`componentDidUpdate()` will be called after render(), in this stage the DOM is created and all DOM Manipulations and interactions will be happened in this phase not in the render phase.
			componentDidUpdate : function(prevprops, prevState) {
				console.log('componentDidUpdate() called');
			},
			
			//event handling to change the state in the `component`
			handleChangeState : function() {
				var messages = ['Hello, World', 'Hello, Planet', 'Hello, Universe'];
				var randomMessage = messages[Math.floor((Math.random() * 3))];

				this.setState({
					message: randomMessage
				});
			},
			
			//deleteDOM to handle `componentUnMount`
			handleRemoveComponent : function() {							
				ReactDOM.unmountComponentAtNode(ReactDOM.findDOMNode(this).parentNode);
			},
			
			/*!
			 * `componentWillUnMount()` is called finally clean up all the attached event listeners/handlers and state.
			 */
			componentWillUnmount : function(){
				console.log('componentWillUnMount() called');
			},
			
			/*!
			 * render method will be called when component is successfully mounted. DOM is created and displayed in the front end.
			 * render method will be again called after `shouldComponentUpdate` is executes. However `shouldComponentUpdate` will not be called during the initial Phase of the component rendering.
			 */
			
			render : function() {
				console.log('render() called');
				return ( 
					< div >
						
						< h2 > On click of `Change Message` Button - we can go thru the < bold > Life Cycle of Reactjs < /bold> < /h2> 
						< p > Prop message: { this.props.name } < /p>
						< p > State message: { this.state.message } < /p>
						<MyImage />
						< p > < input type = "button" onClick = { this.handleChangeState } value = "Change Message" / > < /p> 
						< p > < input id="removeBtn" type = "button" onClick = { this.handleRemoveComponent } value = "Remove Component" / > < /p> 
					< /div>
				);
			}
		});
		
		var MyImage = React.createClass({
		  render: function() {
			return (
			  <img id="kitten" src={'http://placekitten.com.s3.amazonaws.com/homepage-samples/200/287.jpg'} />
			);
		  }
		});

		ReactDOM.render( < RandomMessageComponent / >,
			document.getElementById('root')
		);
    </script>
	<script src="https://unpkg.com/react@15/dist/react.js"></script>
	<script src="https://unpkg.com/react-dom@15/dist/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
  </body>
</html>
